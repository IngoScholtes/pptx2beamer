using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace pptx2beamer
{
    public class LaTeXExporter
    {
        private static string preamble = @"% Beamer code generated by sg2beamer PowerPoint Addin
\documentclass[first,firstsupp,navigation]{SG-ETHclass}
\usepackage{etex}
\setbeameroption{hide notes}
\setbeamertemplate{note page}{\ \\[.3cm]
\textbf{\color{c-bf}Notes:}\\
{\footnotesize
\insertnote}}
\setbeamertemplate{navigation symbols}{}

% some package definitions
\usepackage{pst-pdf,pst-all}
\usepackage{amsmath, amssymb}
\usepackage{pifont}
\usepackage{multimedia}

% title and header";

        static string definitions = @"% some definitions
\newcommand{\Prob}{\mathrm{Pr}}
\newcommand{\sign}{\mathrm{sign}}
\newcommand{\R}{\mathbb{R}}
\newcommand{\N}{\mathbb{N}}
\newcommand{\nbin}[1]{\mathrm{nb}_\mathrm{in}(#1)}
\newcommand{\nbout}[1]{\mathrm{nb}_\mathrm{out}(#1)}
\newcommand{\one}{\mathbb{\bf 1}}
\newcommand{\sref}[1]{SLIDE \ref{#1}}";

        public static void ToLatex(PPTXFile pptx, string outputPath)
        {
            StringBuilder tex = new StringBuilder();
            tex.AppendLine(preamble);

            string title = "";
            string shortTitle = "";
            string author = "";
            string institute = "";
            string url = "";
            string collaborators = "";
            string eventname = "";
            string place = "";

            if (pptx.TitleSlide != null)
            {
                title = pptx.TitleSlide.PresentationTitle;
            }

            tex.AppendLine("\\title{" + title + "}");
            tex.AppendLine("\\newcommand{\\shorttitle}{" + shortTitle + "}");
            tex.AppendLine("\\author{" + author + "}");
            tex.AppendLine("\\date{\\today}");
            tex.AppendLine("\\institute{" + institute + "}");
            tex.AppendLine("\\newcommand{\\homepage}{" + url + "}");
            tex.AppendLine("\\newcommand{\\collaborators}{" + collaborators + "}");
            tex.AppendLine("\\newcommand{\\event}{" + eventname + "}");
            tex.AppendLine("\\newcommand{\\place}{" + place + "}\n");

            tex.AppendLine(definitions);

            tex.AppendLine("% actual content");
            tex.AppendLine("\\begin{document}\n");

            tex.AppendLine(@"\frame{
\maketitle
}
\note{}");


            foreach (PPTXSlide slide in pptx.Slides)
            {
                tex.AppendLine("\n\\frame{");
                if(slide.HasTitle)
                    tex.AppendLine("\t\\frametitle{" + slide.SlideTitle + "}");

                if (slide.HasText)
                    tex.AppendLine(slide.SlideText);

                if (slide.HasImages)
                    tex.AppendLine("% Image goes here");

                tex.AppendLine("}\n");

                if (slide.HasNotes)
                {
                    tex.AppendLine("% slide notes");
                    tex.AppendLine("\\note{" + slide.Notes + "}\n");
                }
            }

            tex.AppendLine("\\end{document}");
            
            System.IO.Directory.CreateDirectory(outputPath.Substring(0, outputPath.LastIndexOf("\\")));
            System.IO.File.WriteAllText(outputPath, tex.ToString(), UTF8Encoding.ASCII);
        }
    }
}
